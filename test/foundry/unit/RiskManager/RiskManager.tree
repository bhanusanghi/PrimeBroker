RiskManager.t.sol
├── When contract addresses are not set properly in constructor
│   └── It should revert



verifyTrade_RiskManager_UnitTest.t.sol
├── When invalid marketKey
│   └── It should revert



verifyClosePosition_RiskManager_UnitTest.t.sol
├── When invalid marketKey
│   └── It should revert


getTotalBuyingPower_RiskManager_UnitTest.t.sol
├── When invalid marginAccount
│   └── It should return 0
├── When valid marginAccount
    ├── When trader has 0 collateral in marginAccount
    │   └── It should return 0
    ├── When trader has collateral in marginAccount
        ├── When trader has interest accrued
        │   └── It should get accounted
        ├── When trader has no interest accrued
        │   └── It should get accounted
        ├── When trader has no unrealisedPnL accrued
        │   └── It should get accounted
        ├── When trader has unrealisedPnL accrued
            ├── positive pnl
        │   └── It should get accounted
        ├── When trader has unrealisedPnL and interest accrued
        │   └── It should get accounted
        ├── When totalCollateralValue is negative
            └── It should return 0
        
getCurrentDollarMarginInMarkets_RiskManager_UnitTest.t.sol
├── When invalid marginAccount
│   └── It should return 0
├── When trader has 0 collateral in TPPs
├── When trader has collateral in TPPs
    ├── When trader has collateral in single TPP
    ├── When trader has collateral in multiple TPPs

        
getUnrealisedPnL_RiskManager_UnitTest.t.sol
├── When invalid marginAccount
│   └── It should return 0
├── When trader has 0 pnl on TPPs
├── When trader has pnl on TPPs
    ├── pnl is in opposite direction from multiple TPPs
    ├── pnl is in same direction from multiple TPPs


getCollateralInMarkets_RiskManager_UnitTest.t.sol
├── When invalid marginAccount
│   └── It should return 0
├── When valid marginAccount
    ├── When no markets exist
    ├── When multiple markets exist


getMaxBorrowLimit_RiskManager_UnitTest.t.sol
├── When invalid marginAccount
│   └── It should return 0
├── When valid marginAccount
    ├── When tcv is 0
    │   └── It should return 0
    ├── When tcv is not 0
        ├── When already borrowed some amount
        │   └── It should return maxBorrowLimit = tcv * maxBorrowLimitPercent 
        ├── when borrowing fresh
        │   └── It should return maxBorrowLimit = tcv * maxBorrowLimitPercent

// pnl and all should already be covered in absCollateralValue tests


verifyBorrowLimit_RiskManager_UnitTest.t.sol
├── When invalid marginAccount
│   └── It should revert
├── When valid marginAccount
    ├── When new borrowAmountX18 is 0
    │    └── It should return 0
    ├── When new borrowAmountX18 is not 0
        ├── When max limit is crossed
        │   └── It should revert
        ├── When max limit is not crossed
        │   └── It should not revert


getMarketPosition_RiskManager_UnitTest.t.sol
├── When invalid marginAccount
│   └── It should revert
├── When valid marginAccount
    ├── When invalid marketKey
    │   └── It should revert
    ├── When valid marketKey
        ├── When user has a valid position
        │   └── It should return the position
        ├── When user had no valid position
        │   └── It should return position
        ├── When position is liquidated on TPP
