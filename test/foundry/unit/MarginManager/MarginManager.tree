
OpenMarginAccount_MarginManager_UnitTest.t.sol
├── When invalid factory
├── When valid factory
    ├── when duplicate trader
    ├── when valid new trader
        ├── creates a new MarginAccount with its initial values set properly, sets tokenAllowance of vault asset to allow repay, adds to traders array, emits event

GetMarginAccount_MarginManager_UnitTest.t.sol
├── valid trader
├── unregistered traders

CloseMarginAccount_MarginManager_UnitTest.t.sol

OpenPosition_MarginManager_UnitTest.t.sol
├── If already liquidatable
│   └── It should revert
├── If not liquidatable
    ├── existing position
    ├── new Position 
        ├── Invalid trade
        │   └── It should revert
        ├── Valid trade
            ├── transferring margin positive
                ├── Calls multi tx
                    ├── If fails
                    │   └── It should revert
                    ├── If successful
                    │   └── Fetches new position
                    │   └── stores new fetched position
                    │   └── Calls add position on marginAccount
                    │   └── Emits margin transferred
            ├── transferring margin negative
            ├── opening position only
            ├── margin transfer with opening position 
                


BorrowFromVault_MarginManager_UnitTest.t.sol
├── InvalidMarginAccount
│   └── It should revert
├── ValidMarginAccount
    ├── zeroAmount
    │   └── It should revert
    ├── nonZeroAmount
        ├── outside borrowLimit
        │   └── It should revert
        ├── within borrowLimit
        │   └── Calls increaseDebt on MarginAccount
        │   └── Calls borrow on Vault
            
RepayVault_MarginManager_UnitTest.t.sol
├── InvalidMarginAccount
│   └── It should revert
├── ValidMarginAccount
    ├── zeroAmount
    │   └── It should revert
    ├── nonZeroAmount
        │   └── Calls decreaseDebt on MarginAccount
        │   └── Calls repay on Vault

SwapAsset_MarginManager_UnitTest.t.sol
├── InvalidMarginAccount
├── ValidMarginAccount
    ├── Liquidatable   
    │   └── It should revert
    ├── Non Liquidatable   
        ├── token in is invalid 
        ├── token out is invalid
        ├── token Out = token In
        ├── token in and out are valid allowedcollateral
            ├── invalid amount input/out/min amount out
            │   └── It should revert
            ├── valid amount input/out/min amount out
                ├── final health is bad
                │   └── It should revert
                ├── final health is good
                    └── final token balances are updated for MA
    


updatePosition_MarginManager_UnitTest.t.sol
closePosition_MarginManager_UnitTest.t.sol
liquidate_MarginManager_UnitTest.t.sol
syncPositions_MarginManager_UnitTest.t.sol


